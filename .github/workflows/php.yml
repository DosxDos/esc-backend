name: PHP Unit Tests

on:
  push:
    branches:
      - main  # Ejecutar pruebas en la rama principal
  pull_request:
    branches:
      - main  # Ejecutar pruebas cuando se haga un PR a la rama principal

jobs:
  phpunit:
    runs-on: ubuntu-latest  # El sistema operativo sobre el que se ejecutará el flujo de trabajo

    services:
      mysql:
        image: mysql:8.0   # Imagen de MySQL 8.0 compatible
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db  # Nombre de la base de datos
          MYSQL_USER: test_user    # Usuario de la base de datos
          MYSQL_PASSWORD: test_password  # Contraseña del usuario
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Este paso asegura que el código esté disponible en el entorno de GitHub Actions

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build and start Apache + PHP + MySQL container
        run: |
          docker network create app-network  # Crear una red personalizada
          
          # Crear el contenedor para Apache + PHP + MySQL
          docker run -d \
            --name apache-php-mysql \
            --network app-network \
            -p 8080:80 \
            -e MYSQL_ROOT_PASSWORD=root \
            -e MYSQL_DATABASE=test_db \
            -e MYSQL_USER=test_user \
            -e MYSQL_PASSWORD=test_password \
            php:8.2-apache bash -c "
              apt-get update && apt-get install -y \
              mysql-server libapache2-mod-php php8.2-mysql php8.2-cli php8.2-xml php8.2-mbstring php8.2-curl && \
              service mysql start && \
              apache2-foreground
            "
          
          # Copiar los archivos de tu aplicación a la carpeta correcta
          docker cp ./src apache-php-mysql:/var/www/html

      - name: Wait for MySQL to be ready
        run: |
          echo "Esperando a que MySQL esté listo..."
          until docker exec apache-php-mysql mysqladmin -h localhost -P 3306 -u root -proot ping --silent; do
            echo "Esperando MySQL..."
            sleep 3
          done
          echo "MySQL está listo."

      - name: Set up database schema
        run: |
          echo "Creando base de datos test_db si no existe..."
          docker exec apache-php-mysql mysql -h localhost -P 3306 -u root -proot -e "CREATE DATABASE IF NOT EXISTS test_db;"  # Usar IP localhost y puerto explícito
          echo "Base de datos test_db creada."

      - name: Set up database schema
        run: |
          echo "Esperando 10 segundos antes de configurar el esquema de la base de datos..."
          sleep 10  # Espera adicional para asegurar que el contenedor MySQL esté completamente disponible
          echo "Importando esquema de la base de datos..."
          docker exec -i apache-php-mysql mysql -h localhost -P 3306 -u test_user -ptest_password test_db < ./schema.sql  # Ajustar la ruta si es necesario
        env:
          PATH_TO_SCHEMA: ./database/schema.sql  # Ruta al archivo de esquema de base de datos

      - name: Run PHPUnit tests
        run: |
          docker exec apache-php-mysql vendor/bin/phpunit --configuration phpunit.xml  # Ejecutar los tests utilizando PHPUnit

      - name: Clean up
        run: |
          docker stop apache-php-mysql
          docker rm apache-php-mysql
          docker network rm app-network  # Eliminar la red creada
